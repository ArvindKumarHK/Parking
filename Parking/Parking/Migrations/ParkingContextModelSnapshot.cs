// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.Data;

#nullable disable

namespace Parking.Migrations
{
    [DbContext(typeof(ParkingContext))]
    partial class ParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Parking.Models.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Resolution")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("Parking.Models.CameraLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CameraId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CameraLogs");
                });

            modelBuilder.Entity("Parking.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Configuration")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastAlivePing")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Network")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Node")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerInputType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PowerState")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Parking.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CameraName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Car")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Misc")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Motorbike")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Person")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Truck")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ZoneId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Parking.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Enterprise")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Parking.Models.Zone", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CameraId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X4")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y4")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.HasIndex("CameraId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Parking.Models.Camera", b =>
                {
                    b.HasOne("Parking.Models.Device", "Device")
                        .WithMany("Cameras")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Parking.Models.Log", b =>
                {
                    b.HasOne("Parking.Models.Device", null)
                        .WithMany("Logs")
                        .HasForeignKey("DeviceId");
                });

            modelBuilder.Entity("Parking.Models.Zone", b =>
                {
                    b.HasOne("Parking.Models.Camera", null)
                        .WithMany("Zones")
                        .HasForeignKey("CameraId");
                });

            modelBuilder.Entity("Parking.Models.Camera", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Parking.Models.Device", b =>
                {
                    b.Navigation("Cameras");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
